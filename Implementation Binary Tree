#include <iostream>
#include<vector>
#include<queue>
using namespace std;
template<typename T>
class BinaryTreeNode{
 public:
 T data;
 BinaryTreeNode *left;
 BinaryTreeNode *right;
 BinaryTreeNode(T data){
     this->data=data;
     left=NULL;
     right=NULL;
 }
 ~BinaryTreeNode(){
     delete left;
     delete right;
 }
};
void printBinaryTree(BinaryTreeNode<int> *root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<":";
    if(root->left!=NULL){
        cout<<"l"<<root->left->data;
    }
    if(root->right!=NULL){
        cout<<"R"<<root->right->data;
    }
    cout<<endl;
    printBinaryTree(root->left);
    printBinaryTree(root->right);
}
BinaryTreeNode<int> *takeInput(){
    int rootData;
    cout<<"Enter data"<<endl;
    cin>>rootData;
   if(rootData==-1){
       return NULL;
   }
   BinaryTreeNode<int> *root=new BinaryTreeNode<int>(rootData);
   BinaryTreeNode<int> *leftChild=takeInput();
   BinaryTreeNode<int> *rightChild=takeInput();
   root->left=leftChild;
   root->right=rightChild;
   return root;
}
BinaryTreeNode<int> *takeInputLevelWise(){
    int rootData;
    cout<<"Enter root Data"<<endl;
    cin>>rootData;
    if(rootData==-1){
        return NULL;
    }
    BinaryTreeNode<int> *root=new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0){
        BinaryTreeNode<int> *front=pendingNodes.front();
        pendingNodes.pop();
        cout<<"enter left child of"<<front->data<<endl;
        int leftChildData;
        cin>>leftChildData;
        if(leftChildData!=-1){
        BinaryTreeNode<int> *leftchild=new BinaryTreeNode<int>(leftChildData);
        front->left=leftchild;
        pendingNodes.push(leftchild);
        }
        cout<<"enter right child of"<<front->data<<endl;
        int rightChildData;
        cin>>rightChildData;
        if(rightChildData!=-1){
       BinaryTreeNode<int> *rightChild=new BinaryTreeNode<int>(rightChildData);
         front->right=rightChild;
         pendingNodes.push(rightChild);
        }
    }
    return root;
    
}
void printLevelWise(BinaryTreeNode<int> *root){
    if(root==NULL){
        return;
    }
    queue<BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0){
        BinaryTreeNode<int> *front=pendingNodes.front();
        pendingNodes.pop();
        cout<<front->data<<":";
        if(front->left!=NULL){
            pendingNodes.push(front->left);
            cout<<"L"<<front->left->data;
        }
        if(front->left!=NULL){
            pendingNodes.push(front->right);
            cout<<"R"<<front->right->data;
        }
        cout<<endl;
    }
}
int main()
{
 /* 
   BinaryTreeNode<int> *root=new BinaryTreeNode<int>(1);
    BinaryTreeNode<int> *node1=new BinaryTreeNode<int>(2);
   BinaryTreeNode<int> *node2=new BinaryTreeNode<int>(3);
   root->left=node1;
   root->right=node2;  */
   BinaryTreeNode<int> *root=takeInputLevelWise();
   printLevelWise(root);
    
    return 0;
}
