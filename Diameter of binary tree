Approach 1  0(n2)
int diameter(Node* root) {
        // Your code here
        if(root==NULL){
        return 0;
    }
    int opt1=diameter(root->left);
    int opt2=diameter(root->right);
    int opt3=height(root->left)+height(root->right)+1;
    return max(opt1,max(opt2,opt3));
    }
    Approach 2 0(n)
     pair<int,int> diameterFast(Node* root){
         if(root == NULL) {
            pair<int,int> p = make_pair(0,0);
            return p;
        }
        
        pair<int,int> left = diameterFast(root->left);
        pair<int,int> right = diameterFast(root->right);
        
        int op1 = left.first;
        int op2 = right.first;
        int op3 = left.second + right.second + 1;
        
        pair<int,int> ans;
        ans.first = max(op1, max(op2, op3));;
        ans.second = max(left.second , right.second) + 1;

        return ans;
    }
    int diameter(Node* root) {
        // Your code here
    /*    if(root==NULL){
        return 0;
    }
   int opt1=diameter(root->left);
    int opt2=diameter(root->right);
    int opt3=height(root->left)+height(root->right)+1;
    return max(opt1,max(opt2,opt3));  */
    return diameterFast(root).first;
    }
